#1 sample T-test

from scipy.stats import ttest_1samp
import numpy as np

ages = np.genfromtxt("ages.csv")

print(ages)

ages_mean = np.mean(ages)
tset, pval = ttest_1samp(ages, 30)

print pval

#one sample T-Test II

from scipy.stats import ttest_1samp
import numpy as np

correct_results = 0 # Start the counter at 0

daily_visitors = np.genfromtxt("daily_visitors.csv", delimiter=",")

for i in range(1000): # 1000 experiments
   #your ttest here:
   t, pval = ttest_1samp(daily_visitors[i], 30) # perform t-test
   if pval < 0.05: # check our p-value
       correct_results += 1
    #print the pvalue here:
   print pval
print "We correctly recognized that the distribution was different in " + str(correct_results) + " out of 1000 experiments."

# 2 Sample T-Tesst

from scipy.stats import ttest_ind
import numpy as np

week1 = np.genfromtxt("week1.csv",  delimiter=",")
week2 = np.genfromtxt("week2.csv",  delimiter=",")
week1_mean = np.mean(week1)
week2_mean = np.mean(week2)
print "The mean in week 1 was " + str(week1_mean) +" and the mean in week 2 was " + str(week2_mean)
week1_std = np.std(week1)
week2_std = np.std(week2)
print "The standard deviation in week 1 was " + str(week1_std) +" and the standard deviation in week 2 was " + str(week2_std)
tstatisitic, pval = ttest_ind(week1, week2)
print pval

#dangers of multiple T-Tests

from scipy.stats import ttest_ind
import numpy as np

a = np.genfromtxt("store_a.csv",  delimiter=",")
b = np.genfromtxt("store_b.csv",  delimiter=",")
c = np.genfromtxt("store_c.csv",  delimiter=",")
a_mean = np.mean(a)
b_mean = np.mean(b)
c_mean = np.mean(c)
print 'The mean of the three datasets is ' + str(a_mean) + str(b_mean) + str(c_mean)
a_std = np.std(a)
b_std = np.std(b)
c_std = np.std(c)
print 'The standard deviation of the three datasets are ' + str(a_std) + str(b_std) + str(c_std)
tstatisitic, a_b_pval = ttest_ind(a, b)
tstatisitic, a_c_pval = ttest_ind(a, c)
tstatisitic, b_c_pval = ttest_ind(b, c)
print "The p-values for the three data sets are: " + str(a_b_pval) + str(a_c_pval) + str(b_c_pval)
error_prob = 1-0.95**3
print "The probability of error is " + str(error_prob)

# ANOVA

from scipy.stats import ttest_ind
from scipy.stats import f_oneway
import numpy as np

a = np.genfromtxt("store_a.csv",  delimiter=",")
b = np.genfromtxt("store_b_new.csv",  delimiter=",")
c = np.genfromtxt("store_c.csv",  delimiter=",")
fstat, pval = f_oneway(a, b, c)
print pval

# assumptions of numerical hypothesis tests
import codecademylib
import numpy as np
import matplotlib.pyplot as plt

dist_1 = np.genfromtxt("1.csv",  delimiter=",")
dist_2 = np.genfromtxt("2.csv",  delimiter=",")
dist_3 = np.genfromtxt("3.csv",  delimiter=",")
dist_4 = np.genfromtxt("4.csv",  delimiter=",")

#plot your histogram here
plt.hist(dist_1)
plt.show()
plt.hist(dist_2)
plt.show()
plt.hist(dist_3)
plt.show()
plt.hist(dist_4)
plt.show()
not_normal = 4
dist_2_std = np.std(dist_2)
dist_3_std = np.std(dist_3)
ratio = float(dist_2_std/dist_3_std)*100
print ratio

#tukey's range test

from statsmodels.stats.multicomp import pairwise_tukeyhsd
from scipy.stats import f_oneway
import numpy as np

a = np.genfromtxt("store_a.csv",  delimiter=",")
b = np.genfromtxt("store_b.csv",  delimiter=",")
c = np.genfromtxt("store_c.csv",  delimiter=",")

stat, pval = f_oneway(a, b, c)
print pval

# Using our data from ANOVA, we create v and l
v = np.concatenate([a, b, c])
labels = ['a'] * len(a) + ['b'] * len(b) + ['c'] * len(c)
tukey_results = pairwise_tukeyhsd(v, labels, 0.05)
print tukey_results

#binomial test

from scipy.stats import binom_test
pval = binom_test(510, n=10000, p=0.06)
print pval
pval2 = binom_test(590, n=10000, p=0.06)
print pval2

#Chi Square Test

from scipy.stats import chi2_contingency

# Contingency table
#         harvester |  leaf cutter
# ----+------------------+------------
# 1st gr | 30       |  10
# 2nd gr | 35       |  5
# 3rd gr | 28       |  12

X = [[30, 10],
     [35, 5],
     [28, 12],[20,20]]
chi2, pval, dof, expected = chi2_contingency(X)
print pval

